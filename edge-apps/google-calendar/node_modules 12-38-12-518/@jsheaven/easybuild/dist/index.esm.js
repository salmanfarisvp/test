// src/index.ts
import { build } from "esbuild";
import { extname, dirname, sep } from "path";
import { readFile } from "fs/promises";
import { basename, parse } from "path";
import { green, red, yellow, white } from "kleur/colors";
import { gzipSize } from "gzip-size";
import brotliSizeModule from "brotli-size";
import prettyBytes from "pretty-bytes";
import fastGlob from "fast-glob";
import { writeFileSync } from "fs";
import { generateDtsBundle } from "dts-bundle-generator";
import { debug, error, info, log, time, timeEnd, warn } from "@jsheaven/status-message";
var getPadLeft = (str, width, char = " ") => char.repeat(width - str.length);
var formatSize = (size, filename, type, raw) => {
  const pretty = raw ? `${size} B` : prettyBytes(size);
  const color = size < 5e3 ? green : size > 4e4 ? red : yellow;
  const indent = getPadLeft(pretty, 13);
  return `${indent}${color(pretty)}: ${white(basename(filename))}${type ? `.${type}` : ""}`;
};
var getSizeInfo = async (code, filename, raw) => {
  raw = raw || code.length < 5e3;
  const [gzip, brotli] = await Promise.all([
    gzipSize(code).catch(() => null),
    // @ts-ignore
    brotliSizeModule.default(code).catch(() => null)
  ]);
  let out = formatSize(gzip, filename, "gz", raw);
  if (brotli) {
    out += "\n" + formatSize(brotli, filename, "br", raw);
  }
  return out;
};
var makeAllPackagesExternalPlugin = {
  name: "make-all-packages-external",
  setup(build2) {
    let filter = /^[^.\/]|^\.[^.\/]|^\.\.[^\/]/;
    build2.onResolve({ filter }, (args) => ({ path: args.path, external: true }));
  }
};
var esmDirnamePlugin = {
  name: "esmDirname",
  setup(build2) {
    const nodeModules = new RegExp(/^(?:.*[\\\/])?node_modules(?:[\\\/].*)?$/);
    build2.onLoad({ filter: /.*/ }, async ({ path }) => {
      if (!path.match(nodeModules)) {
        let contents = await readFile(path, "utf8");
        const loader = extname(path).substring(1);
        const _dirname = dirname(path);
        contents = contents.replaceAll('"/Users/admin/Code/easybundle/src"', `"${_dirname}"`).replaceAll('"/Users/admin/Code/easybundle/src/index.ts"', `"${path}"`);
        return {
          contents,
          loader
        };
      }
    });
  }
};
var baseConfig = {
  sourcemap: "linked",
  target: "esnext",
  bundle: true,
  minify: true,
  minifySyntax: true,
  minifyIdentifiers: true,
  minifyWhitespace: true,
  legalComments: "none"
};
var printFileSizes = async (outfile) => {
  const outfileParsed = parse(outfile);
  log("OK", "Find your bundle in", outfileParsed.dir);
  const file = await fastGlob(`${outfileParsed.dir}${sep}${outfileParsed.name}*{js,map,d.ts}`);
  for (let i = 0; i < file.length; i++) {
    const filePath = file[i];
    const code = await readFile(filePath, { encoding: "utf8" });
    if (filePath.endsWith(".js")) {
      console.log(await getSizeInfo(code, filePath, false));
    }
    console.log(formatSize(Buffer.from(code).byteLength, filePath));
  }
};
var getOutfileName = (fileName, subType) => {
  const fileNameParsed = parse(fileName);
  return `${fileNameParsed.dir}${sep}${fileNameParsed.name}.${subType}${fileNameParsed.ext}`;
};
var debugBuildOptions = {
  minify: false,
  minifySyntax: false,
  minifyIdentifiers: false,
  minifyWhitespace: false
};
var genericBuild = async ({
  outputFormats,
  entryPoint,
  outfile,
  esBuildOptions,
  debug: isDebug,
  dts,
  tsConfigPath,
  dtsLibOptions,
  dtsOutputOptions
}) => {
  time("BUNDLED IN");
  if (isDebug) {
    esBuildOptions = {
      ...esBuildOptions,
      ...debugBuildOptions
    };
    debug(
      "CONFIG",
      "easybundle",
      {
        entryPoint,
        outfile,
        esBuildOptions,
        debug: isDebug,
        dts,
        tsConfigPath,
        dtsLibOptions,
        dtsOutputOptions
      },
      "esbuild plugins",
      esBuildOptions.plugins
    );
  }
  time("BUILT IN");
  info("BUILD", "Transpiling", entryPoint, "...");
  await Promise.all(
    outputFormats.map(
      async (format) => build({
        format,
        entryPoints: [entryPoint],
        outfile: getOutfileName(outfile, format),
        ...esBuildOptions || {}
      })
    )
  );
  timeEnd("BUILT IN");
  if (dts) {
    time("DTS IN");
    info("DTS", "Generating .d.ts files...");
    try {
      const dTsBundles = generateDtsBundle(
        [
          {
            filePath: entryPoint,
            libraries: dtsLibOptions,
            output: dtsOutputOptions
          }
        ],
        { preferredConfigPath: tsConfigPath }
      );
      for (let i = 0; i < outputFormats.length; i++) {
        const format = outputFormats[i];
        const outFileNameParsed = parse(getOutfileName(outfile, format));
        const declarationOutFile = `${outFileNameParsed.dir}${sep}${outFileNameParsed.name}.d.ts`;
        writeFileSync(declarationOutFile, dTsBundles[0], { encoding: "utf-8" });
      }
    } catch (e) {
      if (/Symbol for root source file (.*) not found/.test(e.toString())) {
        warn("DTS", "No type exports found. Skipping.");
      } else {
        error("DTS", "Error while generating .d.ts files: ", e);
      }
    }
    timeEnd("DTS IN");
  }
  await printFileSizes(outfile);
  timeEnd("BUNDLED IN");
};
var genericDefaultBundleConifg = {
  outputFormats: ["iife", "esm", "cjs"],
  dts: true,
  tsConfigPath: "tsconfig.json",
  dtsOutputOptions: {
    exportReferencedTypes: true,
    inlineDeclareExternals: true,
    inlineDeclareGlobals: true,
    noBanner: true,
    sortNodes: true
  }
};
var defaultBundleConfigBrowser = {
  ...genericDefaultBundleConifg,
  esBuildOptions: {
    ...baseConfig,
    platform: "browser",
    plugins: [esmDirnamePlugin]
  }
};
var defaultBundleConfigNode = {
  ...genericDefaultBundleConifg,
  esBuildOptions: {
    ...baseConfig,
    platform: "node",
    plugins: [esmDirnamePlugin, makeAllPackagesExternalPlugin]
  }
};
var buildForBrowser = async (config) => genericBuild({
  ...defaultBundleConfigBrowser,
  ...config,
  dtsOutputOptions: {
    ...defaultBundleConfigBrowser.dtsOutputOptions,
    ...config.dtsOutputOptions || {}
  },
  esBuildOptions: {
    ...defaultBundleConfigBrowser.esBuildOptions,
    ...config.esBuildOptions || {}
  }
});
var buildForNode = async (config) => genericBuild({
  ...defaultBundleConfigNode,
  ...config,
  dtsOutputOptions: {
    ...defaultBundleConfigNode.dtsOutputOptions,
    ...config.dtsOutputOptions || {}
  },
  esBuildOptions: {
    ...defaultBundleConfigNode.esBuildOptions,
    ...config.esBuildOptions || {}
  }
});
export {
  baseConfig,
  buildForBrowser,
  buildForNode,
  debugBuildOptions,
  defaultBundleConfigBrowser,
  defaultBundleConfigNode,
  esmDirnamePlugin,
  formatSize,
  genericBuild,
  genericDefaultBundleConifg,
  getOutfileName,
  getPadLeft,
  getSizeInfo,
  makeAllPackagesExternalPlugin
};
//# sourceMappingURL=index.esm.js.map
