var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  baseConfig: () => baseConfig,
  buildForBrowser: () => buildForBrowser,
  buildForNode: () => buildForNode,
  debugBuildOptions: () => debugBuildOptions,
  defaultBundleConfigBrowser: () => defaultBundleConfigBrowser,
  defaultBundleConfigNode: () => defaultBundleConfigNode,
  esmDirnamePlugin: () => esmDirnamePlugin,
  formatSize: () => formatSize,
  genericBuild: () => genericBuild,
  genericDefaultBundleConifg: () => genericDefaultBundleConifg,
  getOutfileName: () => getOutfileName,
  getPadLeft: () => getPadLeft,
  getSizeInfo: () => getSizeInfo,
  makeAllPackagesExternalPlugin: () => makeAllPackagesExternalPlugin
});
module.exports = __toCommonJS(src_exports);
var import_esbuild = require("esbuild");
var import_path = require("path");
var import_promises = require("fs/promises");
var import_path2 = require("path");
var import_colors = require("kleur/colors");
var import_gzip_size = require("gzip-size");
var import_brotli_size = __toESM(require("brotli-size"), 1);
var import_pretty_bytes = __toESM(require("pretty-bytes"), 1);
var import_fast_glob = __toESM(require("fast-glob"), 1);
var import_fs = require("fs");
var import_dts_bundle_generator = require("dts-bundle-generator");
var import_status_message = require("@jsheaven/status-message");
var getPadLeft = (str, width, char = " ") => char.repeat(width - str.length);
var formatSize = (size, filename, type, raw) => {
  const pretty = raw ? `${size} B` : (0, import_pretty_bytes.default)(size);
  const color = size < 5e3 ? import_colors.green : size > 4e4 ? import_colors.red : import_colors.yellow;
  const indent = getPadLeft(pretty, 13);
  return `${indent}${color(pretty)}: ${(0, import_colors.white)((0, import_path2.basename)(filename))}${type ? `.${type}` : ""}`;
};
var getSizeInfo = async (code, filename, raw) => {
  raw = raw || code.length < 5e3;
  const [gzip, brotli] = await Promise.all([
    (0, import_gzip_size.gzipSize)(code).catch(() => null),
    // @ts-ignore
    import_brotli_size.default.default(code).catch(() => null)
  ]);
  let out = formatSize(gzip, filename, "gz", raw);
  if (brotli) {
    out += "\n" + formatSize(brotli, filename, "br", raw);
  }
  return out;
};
var makeAllPackagesExternalPlugin = {
  name: "make-all-packages-external",
  setup(build2) {
    let filter = /^[^.\/]|^\.[^.\/]|^\.\.[^\/]/;
    build2.onResolve({ filter }, (args) => ({ path: args.path, external: true }));
  }
};
var esmDirnamePlugin = {
  name: "esmDirname",
  setup(build2) {
    const nodeModules = new RegExp(/^(?:.*[\\\/])?node_modules(?:[\\\/].*)?$/);
    build2.onLoad({ filter: /.*/ }, async ({ path }) => {
      if (!path.match(nodeModules)) {
        let contents = await (0, import_promises.readFile)(path, "utf8");
        const loader = (0, import_path.extname)(path).substring(1);
        const _dirname = (0, import_path.dirname)(path);
        contents = contents.replaceAll('"/Users/admin/Code/easybundle/src"', `"${_dirname}"`).replaceAll('"/Users/admin/Code/easybundle/src/index.ts"', `"${path}"`);
        return {
          contents,
          loader
        };
      }
    });
  }
};
var baseConfig = {
  sourcemap: "linked",
  target: "esnext",
  bundle: true,
  minify: true,
  minifySyntax: true,
  minifyIdentifiers: true,
  minifyWhitespace: true,
  legalComments: "none"
};
var printFileSizes = async (outfile) => {
  const outfileParsed = (0, import_path2.parse)(outfile);
  (0, import_status_message.log)("OK", "Find your bundle in", outfileParsed.dir);
  const file = await (0, import_fast_glob.default)(`${outfileParsed.dir}${import_path.sep}${outfileParsed.name}*{js,map,d.ts}`);
  for (let i = 0; i < file.length; i++) {
    const filePath = file[i];
    const code = await (0, import_promises.readFile)(filePath, { encoding: "utf8" });
    if (filePath.endsWith(".js")) {
      console.log(await getSizeInfo(code, filePath, false));
    }
    console.log(formatSize(Buffer.from(code).byteLength, filePath));
  }
};
var getOutfileName = (fileName, subType) => {
  const fileNameParsed = (0, import_path2.parse)(fileName);
  return `${fileNameParsed.dir}${import_path.sep}${fileNameParsed.name}.${subType}${fileNameParsed.ext}`;
};
var debugBuildOptions = {
  minify: false,
  minifySyntax: false,
  minifyIdentifiers: false,
  minifyWhitespace: false
};
var genericBuild = async ({
  outputFormats,
  entryPoint,
  outfile,
  esBuildOptions,
  debug: isDebug,
  dts,
  tsConfigPath,
  dtsLibOptions,
  dtsOutputOptions
}) => {
  (0, import_status_message.time)("BUNDLED IN");
  if (isDebug) {
    esBuildOptions = {
      ...esBuildOptions,
      ...debugBuildOptions
    };
    (0, import_status_message.debug)(
      "CONFIG",
      "easybundle",
      {
        entryPoint,
        outfile,
        esBuildOptions,
        debug: isDebug,
        dts,
        tsConfigPath,
        dtsLibOptions,
        dtsOutputOptions
      },
      "esbuild plugins",
      esBuildOptions.plugins
    );
  }
  (0, import_status_message.time)("BUILT IN");
  (0, import_status_message.info)("BUILD", "Transpiling", entryPoint, "...");
  await Promise.all(
    outputFormats.map(
      async (format) => (0, import_esbuild.build)({
        format,
        entryPoints: [entryPoint],
        outfile: getOutfileName(outfile, format),
        ...esBuildOptions || {}
      })
    )
  );
  (0, import_status_message.timeEnd)("BUILT IN");
  if (dts) {
    (0, import_status_message.time)("DTS IN");
    (0, import_status_message.info)("DTS", "Generating .d.ts files...");
    try {
      const dTsBundles = (0, import_dts_bundle_generator.generateDtsBundle)(
        [
          {
            filePath: entryPoint,
            libraries: dtsLibOptions,
            output: dtsOutputOptions
          }
        ],
        { preferredConfigPath: tsConfigPath }
      );
      for (let i = 0; i < outputFormats.length; i++) {
        const format = outputFormats[i];
        const outFileNameParsed = (0, import_path2.parse)(getOutfileName(outfile, format));
        const declarationOutFile = `${outFileNameParsed.dir}${import_path.sep}${outFileNameParsed.name}.d.ts`;
        (0, import_fs.writeFileSync)(declarationOutFile, dTsBundles[0], { encoding: "utf-8" });
      }
    } catch (e) {
      if (/Symbol for root source file (.*) not found/.test(e.toString())) {
        (0, import_status_message.warn)("DTS", "No type exports found. Skipping.");
      } else {
        (0, import_status_message.error)("DTS", "Error while generating .d.ts files: ", e);
      }
    }
    (0, import_status_message.timeEnd)("DTS IN");
  }
  await printFileSizes(outfile);
  (0, import_status_message.timeEnd)("BUNDLED IN");
};
var genericDefaultBundleConifg = {
  outputFormats: ["iife", "esm", "cjs"],
  dts: true,
  tsConfigPath: "tsconfig.json",
  dtsOutputOptions: {
    exportReferencedTypes: true,
    inlineDeclareExternals: true,
    inlineDeclareGlobals: true,
    noBanner: true,
    sortNodes: true
  }
};
var defaultBundleConfigBrowser = {
  ...genericDefaultBundleConifg,
  esBuildOptions: {
    ...baseConfig,
    platform: "browser",
    plugins: [esmDirnamePlugin]
  }
};
var defaultBundleConfigNode = {
  ...genericDefaultBundleConifg,
  esBuildOptions: {
    ...baseConfig,
    platform: "node",
    plugins: [esmDirnamePlugin, makeAllPackagesExternalPlugin]
  }
};
var buildForBrowser = async (config) => genericBuild({
  ...defaultBundleConfigBrowser,
  ...config,
  dtsOutputOptions: {
    ...defaultBundleConfigBrowser.dtsOutputOptions,
    ...config.dtsOutputOptions || {}
  },
  esBuildOptions: {
    ...defaultBundleConfigBrowser.esBuildOptions,
    ...config.esBuildOptions || {}
  }
});
var buildForNode = async (config) => genericBuild({
  ...defaultBundleConfigNode,
  ...config,
  dtsOutputOptions: {
    ...defaultBundleConfigNode.dtsOutputOptions,
    ...config.dtsOutputOptions || {}
  },
  esBuildOptions: {
    ...defaultBundleConfigNode.esBuildOptions,
    ...config.esBuildOptions || {}
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  baseConfig,
  buildForBrowser,
  buildForNode,
  debugBuildOptions,
  defaultBundleConfigBrowser,
  defaultBundleConfigNode,
  esmDirnamePlugin,
  formatSize,
  genericBuild,
  genericDefaultBundleConifg,
  getOutfileName,
  getPadLeft,
  getSizeInfo,
  makeAllPackagesExternalPlugin
});
//# sourceMappingURL=index.cjs.js.map
