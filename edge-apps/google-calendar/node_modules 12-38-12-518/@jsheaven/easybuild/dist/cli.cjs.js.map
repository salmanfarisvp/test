{
  "version": 3,
  "sources": ["../src/index.ts", "../src/cli.ts"],
  "sourcesContent": ["import { build, BuildOptions, Loader, Plugin } from 'esbuild'\nimport { extname, dirname, sep } from 'path'\nimport { readFile } from 'fs/promises'\nimport { basename, parse } from 'path'\nimport { green, red, yellow, white } from 'kleur/colors'\nimport { gzipSize } from 'gzip-size'\nimport brotliSizeModule from 'brotli-size'\nimport prettyBytes from 'pretty-bytes'\nimport fastGlob from 'fast-glob'\nimport { writeFileSync } from 'fs'\nimport { generateDtsBundle, LibrariesOptions, OutputOptions } from 'dts-bundle-generator'\nimport { debug, error, info, log, time, timeEnd, warn } from '@jsheaven/status-message'\n\n/** adds spaces from left so that all lines are visually in line vertically */\nexport const getPadLeft = (str: string, width: number, char = ' ') => char.repeat(width - str.length)\n\n/** formats the byte/kByte sizes with coloring */\nexport const formatSize = (size: number, filename: string, type?: string, raw?: boolean) => {\n  const pretty = raw ? `${size} B` : prettyBytes(size)\n  const color = size < 5000 ? green : size > 40000 ? red : yellow\n  const indent = getPadLeft(pretty, 13)\n  return `${indent}${color(pretty)}: ${white(basename(filename))}${type ? `.${type}` : ''}`\n}\n\n/** returns the text of all file sizes per compression */\nexport const getSizeInfo = async (code: string, filename: string, raw: boolean) => {\n  raw = raw || code.length < 5000\n\n  const [gzip, brotli] = await Promise.all([\n    gzipSize(code).catch(() => null),\n    // @ts-ignore\n    brotliSizeModule.default(code).catch(() => null),\n  ])\n\n  let out = formatSize(gzip, filename, 'gz', raw)\n  if (brotli) {\n    out += '\\n' + formatSize(brotli, filename, 'br', raw)\n  }\n  return out\n}\n\n/** adds all node_module imports to external so that --bundle in esbuild is not bundling them in */\nexport const makeAllPackagesExternalPlugin: Plugin = {\n  name: 'make-all-packages-external',\n  setup(build) {\n    let filter = /^[^.\\/]|^\\.[^.\\/]|^\\.\\.[^\\/]/ // Must not start with \"/\" or \"./\" or \"../\"\n    build.onResolve({ filter }, (args) => ({ path: args.path, external: true }))\n  },\n}\n\n/** makes sure that all \"/Users/admin/Code/easybundle/src\" and \"/Users/admin/Code/easybundle/src/index.ts\" occurances are replaced why the actual filenames */\nexport const esmDirnamePlugin: Plugin = {\n  name: 'esmDirname',\n  setup(build) {\n    const nodeModules = new RegExp(/^(?:.*[\\\\\\/])?node_modules(?:[\\\\\\/].*)?$/)\n    build.onLoad({ filter: /.*/ }, async ({ path }) => {\n      if (!path.match(nodeModules)) {\n        let contents = await readFile(path, 'utf8')\n        const loader = extname(path).substring(1) as Loader\n        const _dirname = dirname(path)\n        contents = contents.replaceAll('\"/Users/admin/Code/easybundle/src\"', `\"${_dirname}\"`).replaceAll('\"/Users/admin/Code/easybundle/src/index.ts\"', `\"${path}\"`)\n        return {\n          contents,\n          loader,\n        }\n      }\n    })\n  },\n}\n\n/** default baseConfig for esbuild */\nexport const baseConfig: BuildOptions = {\n  sourcemap: 'linked',\n  target: 'esnext',\n  bundle: true,\n  minify: true,\n  minifySyntax: true,\n  minifyIdentifiers: true,\n  minifyWhitespace: true,\n  legalComments: 'none',\n}\n\n/** prints all file sizes for the generated JS files */\nconst printFileSizes = async (outfile: string) => {\n  const outfileParsed = parse(outfile)\n  log('OK', 'Find your bundle in', outfileParsed.dir)\n  const file = await fastGlob(`${outfileParsed.dir}${sep}${outfileParsed.name}*{js,map,d.ts}`)\n\n  for (let i = 0; i < file.length; i++) {\n    const filePath = file[i]\n    const code = await readFile(filePath, { encoding: 'utf8' })\n    if (filePath.endsWith('.js')) {\n      console.log(await getSizeInfo(code, filePath, false))\n    }\n    console.log(formatSize(Buffer.from(code).byteLength, filePath))\n  }\n}\n\n/** rewrites the outfile name from e.g. ./dist/index.js to ./dist/index.esm.js, ./dist/index.iife.js */\nexport const getOutfileName = (fileName: string, subType: BuildOptions['format']) => {\n  const fileNameParsed = parse(fileName)\n  return `${fileNameParsed.dir}${sep}${fileNameParsed.name}.${subType}${fileNameParsed.ext}`\n}\n\n/** options applied, when debug is enabled */\nexport const debugBuildOptions: Partial<BuildOptions> = {\n  minify: false,\n  minifySyntax: false,\n  minifyIdentifiers: false,\n  minifyWhitespace: false,\n}\n\n/** calls esbuild with a dynamic configuration per format */\nexport const genericBuild = async ({\n  outputFormats,\n  entryPoint,\n  outfile,\n  esBuildOptions,\n  debug: isDebug,\n  dts,\n  tsConfigPath,\n  dtsLibOptions,\n  dtsOutputOptions,\n}: BundleConfig) => {\n  time('BUNDLED IN')\n\n  if (isDebug) {\n    // override minification parameters\n    // but let the user still influence them\n    esBuildOptions = {\n      ...esBuildOptions,\n      ...debugBuildOptions,\n    } as BuildOptions\n\n    debug(\n      'CONFIG',\n      'easybundle',\n      {\n        entryPoint,\n        outfile,\n        esBuildOptions,\n        debug: isDebug,\n        dts,\n        tsConfigPath,\n        dtsLibOptions,\n        dtsOutputOptions,\n      },\n      'esbuild plugins',\n      esBuildOptions.plugins,\n    )\n  }\n\n  time('BUILT IN')\n  info('BUILD', 'Transpiling', entryPoint, '...')\n\n  await Promise.all(\n    outputFormats.map(async (format: BuildOptions['format']) =>\n      build({\n        format,\n        entryPoints: [entryPoint],\n        outfile: getOutfileName(outfile, format),\n        ...(esBuildOptions || {}),\n      } as BuildOptions),\n    ),\n  )\n  timeEnd('BUILT IN')\n\n  if (dts) {\n    time('DTS IN')\n    info('DTS', 'Generating .d.ts files...')\n    try {\n      const dTsBundles = generateDtsBundle(\n        [\n          {\n            filePath: entryPoint,\n            libraries: dtsLibOptions,\n            output: dtsOutputOptions,\n          },\n        ],\n        { preferredConfigPath: tsConfigPath },\n      )\n\n      for (let i = 0; i < outputFormats.length; i++) {\n        const format = outputFormats[i]\n        const outFileNameParsed = parse(getOutfileName(outfile, format))\n        const declarationOutFile = `${outFileNameParsed.dir}${sep}${outFileNameParsed.name}.d.ts`\n        writeFileSync(declarationOutFile, dTsBundles[0], { encoding: 'utf-8' })\n      }\n    } catch (e) {\n      if (/Symbol for root source file (.*) not found/.test(e.toString())) {\n        warn('DTS', 'No type exports found. Skipping.')\n      } else {\n        error('DTS', 'Error while generating .d.ts files: ', e)\n      }\n    }\n    timeEnd('DTS IN')\n  }\n  await printFileSizes(outfile)\n\n  timeEnd('BUNDLED IN')\n}\n\nexport interface BundleConfig {\n  /** allows to customize the output formats that esbuild would generate. default: ['iife', 'esm', 'cjs'] */\n  outputFormats?: Array<BuildOptions['format']>\n\n  /** shall the output not be minified and treeShaked but left readable?  default: false */\n  debug?: boolean\n\n  /** a file to start bundling for. e.g. ./src/index.ts */\n  entryPoint: string\n\n  /** a file to write to. e.g. ./dist/index.js */\n  outfile: string\n\n  /** shall the output include .d.ts type declarations? (takes much longer to compile); default: true */\n  dts?: boolean\n\n  /** allows to inline types of libraries etc. */\n  dtsLibOptions?: LibrariesOptions\n\n  /** allows to control .d.ts. bundle specifics */\n  dtsOutputOptions?: OutputOptions\n\n  /** path to a tsconfig.json file, if existing; default: 'tsconfig.json' */\n  tsConfigPath?: string\n\n  /** esbuild BuildConfig to override internal configuration */\n  esBuildOptions?: BuildOptions\n}\n\nexport const genericDefaultBundleConifg: Partial<BundleConfig> = {\n  outputFormats: ['iife', 'esm', 'cjs'],\n  dts: true,\n  tsConfigPath: 'tsconfig.json',\n  dtsOutputOptions: {\n    exportReferencedTypes: true,\n    inlineDeclareExternals: true,\n    inlineDeclareGlobals: true,\n    noBanner: true,\n    sortNodes: true,\n  },\n}\n\nexport const defaultBundleConfigBrowser: Partial<BundleConfig> = {\n  ...genericDefaultBundleConifg,\n  esBuildOptions: {\n    ...baseConfig,\n    platform: 'browser',\n    plugins: [esmDirnamePlugin],\n  },\n}\n\nexport const defaultBundleConfigNode: Partial<BundleConfig> = {\n  ...genericDefaultBundleConifg,\n  esBuildOptions: {\n    ...baseConfig,\n    platform: 'node',\n    plugins: [esmDirnamePlugin, makeAllPackagesExternalPlugin],\n  },\n}\n\n/** configures esbuild to build one file for a browser environment; defaults: defaultBundleConfigBrowser  */\nexport const buildForBrowser = async (config: BundleConfig) =>\n  genericBuild({\n    ...defaultBundleConfigBrowser,\n    ...config,\n    dtsOutputOptions: {\n      ...defaultBundleConfigBrowser.dtsOutputOptions,\n      ...(config.dtsOutputOptions || {}),\n    },\n    esBuildOptions: {\n      ...defaultBundleConfigBrowser.esBuildOptions,\n      ...(config.esBuildOptions || {}),\n    },\n  })\n\n/** configures esbuild to build one file for a Node.js environment; defaults: defaultBundleConfigNode */\nexport const buildForNode = async (config: BundleConfig) =>\n  genericBuild({\n    ...defaultBundleConfigNode,\n    ...config,\n    dtsOutputOptions: {\n      ...defaultBundleConfigNode.dtsOutputOptions,\n      ...(config.dtsOutputOptions || {}),\n    },\n    esBuildOptions: {\n      ...defaultBundleConfigNode.esBuildOptions,\n      ...(config.esBuildOptions || {}),\n    },\n  })\n", "#!/usr/bin/env node\n'use strict'\n\nconst entryPoint = process.argv[2] || './src/index.ts'\nconst outfile = process.argv[3] || './dist/index.js'\nconst platform = process.argv[4] || 'node'\n\nif (platform === 'browser') {\n  import('./index').then(({ buildForBrowser }) =>\n    buildForBrowser({\n      entryPoint,\n      outfile,\n    }),\n  )\n} else {\n  import('./index').then(({ buildForNode }) =>\n    buildForNode({\n      entryPoint,\n      outfile,\n    }),\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,aACA,iBACAA,cACA,eACA,kBACA,oBACA,qBACA,kBACA,WACA,6BACA,uBAGa,YAGA,YAQA,aAiBA,+BASA,kBAoBA,YAYP,gBAgBO,gBAMA,mBAQA,cAsHA,4BAaA,4BASA,yBAUA,iBAeA;AAtRb;AAAA;AAAA,qBAAoD;AACpD,kBAAsC;AACtC,sBAAyB;AACzB,IAAAA,eAAgC;AAChC,oBAA0C;AAC1C,uBAAyB;AACzB,yBAA6B;AAC7B,0BAAwB;AACxB,uBAAqB;AACrB,gBAA8B;AAC9B,kCAAmE;AACnE,4BAA6D;AAGtD,IAAM,aAAa,CAAC,KAAa,OAAe,OAAO,QAAQ,KAAK,OAAO,QAAQ,IAAI,MAAM;AAG7F,IAAM,aAAa,CAAC,MAAc,UAAkB,MAAe,QAAkB;AAC1F,YAAM,SAAS,MAAM,GAAG,eAAW,oBAAAC,SAAY,IAAI;AACnD,YAAM,QAAQ,OAAO,MAAO,sBAAQ,OAAO,MAAQ,oBAAM;AACzD,YAAM,SAAS,WAAW,QAAQ,EAAE;AACpC,aAAO,GAAG,SAAS,MAAM,MAAM,UAAM,yBAAM,uBAAS,QAAQ,CAAC,IAAI,OAAO,IAAI,SAAS;AAAA,IACvF;AAGO,IAAM,cAAc,OAAO,MAAc,UAAkB,QAAiB;AACjF,YAAM,OAAO,KAAK,SAAS;AAE3B,YAAM,CAAC,MAAM,MAAM,IAAI,MAAM,QAAQ,IAAI;AAAA,YACvC,2BAAS,IAAI,EAAE,MAAM,MAAM,IAAI;AAAA;AAAA,QAE/B,mBAAAC,QAAiB,QAAQ,IAAI,EAAE,MAAM,MAAM,IAAI;AAAA,MACjD,CAAC;AAED,UAAI,MAAM,WAAW,MAAM,UAAU,MAAM,GAAG;AAC9C,UAAI,QAAQ;AACV,eAAO,OAAO,WAAW,QAAQ,UAAU,MAAM,GAAG;AAAA,MACtD;AACA,aAAO;AAAA,IACT;AAGO,IAAM,gCAAwC;AAAA,MACnD,MAAM;AAAA,MACN,MAAMC,QAAO;AACX,YAAI,SAAS;AACb,QAAAA,OAAM,UAAU,EAAE,OAAO,GAAG,CAAC,UAAU,EAAE,MAAM,KAAK,MAAM,UAAU,KAAK,EAAE;AAAA,MAC7E;AAAA,IACF;AAGO,IAAM,mBAA2B;AAAA,MACtC,MAAM;AAAA,MACN,MAAMA,QAAO;AACX,cAAM,cAAc,IAAI,OAAO,0CAA0C;AACzE,QAAAA,OAAM,OAAO,EAAE,QAAQ,KAAK,GAAG,OAAO,EAAE,KAAK,MAAM;AACjD,cAAI,CAAC,KAAK,MAAM,WAAW,GAAG;AAC5B,gBAAI,WAAW,UAAM,0BAAS,MAAM,MAAM;AAC1C,kBAAM,aAAS,qBAAQ,IAAI,EAAE,UAAU,CAAC;AACxC,kBAAM,eAAW,qBAAQ,IAAI;AAC7B,uBAAW,SAAS,WAAW,sCAAsC,IAAI,WAAW,EAAE,WAAW,+CAA+C,IAAI,OAAO;AAC3J,mBAAO;AAAA,cACL;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAGO,IAAM,aAA2B;AAAA,MACtC,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,mBAAmB;AAAA,MACnB,kBAAkB;AAAA,MAClB,eAAe;AAAA,IACjB;AAGA,IAAM,iBAAiB,OAAOC,aAAoB;AAChD,YAAM,oBAAgB,oBAAMA,QAAO;AACnC,qCAAI,MAAM,uBAAuB,cAAc,GAAG;AAClD,YAAM,OAAO,UAAM,iBAAAC,SAAS,GAAG,cAAc,MAAM,kBAAM,cAAc,oBAAoB;AAE3F,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,cAAM,WAAW,KAAK,CAAC;AACvB,cAAM,OAAO,UAAM,0BAAS,UAAU,EAAE,UAAU,OAAO,CAAC;AAC1D,YAAI,SAAS,SAAS,KAAK,GAAG;AAC5B,kBAAQ,IAAI,MAAM,YAAY,MAAM,UAAU,KAAK,CAAC;AAAA,QACtD;AACA,gBAAQ,IAAI,WAAW,OAAO,KAAK,IAAI,EAAE,YAAY,QAAQ,CAAC;AAAA,MAChE;AAAA,IACF;AAGO,IAAM,iBAAiB,CAAC,UAAkB,YAAoC;AACnF,YAAM,qBAAiB,oBAAM,QAAQ;AACrC,aAAO,GAAG,eAAe,MAAM,kBAAM,eAAe,QAAQ,UAAU,eAAe;AAAA,IACvF;AAGO,IAAM,oBAA2C;AAAA,MACtD,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,mBAAmB;AAAA,MACnB,kBAAkB;AAAA,IACpB;AAGO,IAAM,eAAe,OAAO;AAAA,MACjC;AAAA,MACA,YAAAC;AAAA,MACA,SAAAF;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,MAAoB;AAClB,sCAAK,YAAY;AAEjB,UAAI,SAAS;AAGX,yBAAiB;AAAA,UACf,GAAG;AAAA,UACH,GAAG;AAAA,QACL;AAEA;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,YACE,YAAAE;AAAA,YACA,SAAAF;AAAA,YACA;AAAA,YACA,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,UACA;AAAA,UACA,eAAe;AAAA,QACjB;AAAA,MACF;AAEA,sCAAK,UAAU;AACf,sCAAK,SAAS,eAAeE,aAAY,KAAK;AAE9C,YAAM,QAAQ;AAAA,QACZ,cAAc;AAAA,UAAI,OAAO,eACvB,sBAAM;AAAA,YACJ;AAAA,YACA,aAAa,CAACA,WAAU;AAAA,YACxB,SAAS,eAAeF,UAAS,MAAM;AAAA,YACvC,GAAI,kBAAkB,CAAC;AAAA,UACzB,CAAiB;AAAA,QACnB;AAAA,MACF;AACA,yCAAQ,UAAU;AAElB,UAAI,KAAK;AACP,wCAAK,QAAQ;AACb,wCAAK,OAAO,2BAA2B;AACvC,YAAI;AACF,gBAAM,iBAAa;AAAA,YACjB;AAAA,cACE;AAAA,gBACE,UAAUE;AAAA,gBACV,WAAW;AAAA,gBACX,QAAQ;AAAA,cACV;AAAA,YACF;AAAA,YACA,EAAE,qBAAqB,aAAa;AAAA,UACtC;AAEA,mBAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC7C,kBAAM,SAAS,cAAc,CAAC;AAC9B,kBAAM,wBAAoB,oBAAM,eAAeF,UAAS,MAAM,CAAC;AAC/D,kBAAM,qBAAqB,GAAG,kBAAkB,MAAM,kBAAM,kBAAkB;AAC9E,yCAAc,oBAAoB,WAAW,CAAC,GAAG,EAAE,UAAU,QAAQ,CAAC;AAAA,UACxE;AAAA,QACF,SAAS,GAAP;AACA,cAAI,6CAA6C,KAAK,EAAE,SAAS,CAAC,GAAG;AACnE,4CAAK,OAAO,kCAAkC;AAAA,UAChD,OAAO;AACL,6CAAM,OAAO,wCAAwC,CAAC;AAAA,UACxD;AAAA,QACF;AACA,2CAAQ,QAAQ;AAAA,MAClB;AACA,YAAM,eAAeA,QAAO;AAE5B,yCAAQ,YAAY;AAAA,IACtB;AA+BO,IAAM,6BAAoD;AAAA,MAC/D,eAAe,CAAC,QAAQ,OAAO,KAAK;AAAA,MACpC,KAAK;AAAA,MACL,cAAc;AAAA,MACd,kBAAkB;AAAA,QAChB,uBAAuB;AAAA,QACvB,wBAAwB;AAAA,QACxB,sBAAsB;AAAA,QACtB,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,IACF;AAEO,IAAM,6BAAoD;AAAA,MAC/D,GAAG;AAAA,MACH,gBAAgB;AAAA,QACd,GAAG;AAAA,QACH,UAAU;AAAA,QACV,SAAS,CAAC,gBAAgB;AAAA,MAC5B;AAAA,IACF;AAEO,IAAM,0BAAiD;AAAA,MAC5D,GAAG;AAAA,MACH,gBAAgB;AAAA,QACd,GAAG;AAAA,QACH,UAAU;AAAA,QACV,SAAS,CAAC,kBAAkB,6BAA6B;AAAA,MAC3D;AAAA,IACF;AAGO,IAAM,kBAAkB,OAAO,WACpC,aAAa;AAAA,MACX,GAAG;AAAA,MACH,GAAG;AAAA,MACH,kBAAkB;AAAA,QAChB,GAAG,2BAA2B;AAAA,QAC9B,GAAI,OAAO,oBAAoB,CAAC;AAAA,MAClC;AAAA,MACA,gBAAgB;AAAA,QACd,GAAG,2BAA2B;AAAA,QAC9B,GAAI,OAAO,kBAAkB,CAAC;AAAA,MAChC;AAAA,IACF,CAAC;AAGI,IAAM,eAAe,OAAO,WACjC,aAAa;AAAA,MACX,GAAG;AAAA,MACH,GAAG;AAAA,MACH,kBAAkB;AAAA,QAChB,GAAG,wBAAwB;AAAA,QAC3B,GAAI,OAAO,oBAAoB,CAAC;AAAA,MAClC;AAAA,MACA,gBAAgB;AAAA,QACd,GAAG,wBAAwB;AAAA,QAC3B,GAAI,OAAO,kBAAkB,CAAC;AAAA,MAChC;AAAA,IACF,CAAC;AAAA;AAAA;;;AC/RH,IAAM,aAAa,QAAQ,KAAK,CAAC,KAAK;AACtC,IAAM,UAAU,QAAQ,KAAK,CAAC,KAAK;AACnC,IAAM,WAAW,QAAQ,KAAK,CAAC,KAAK;AAEpC,IAAI,aAAa,WAAW;AAC1B,0DAAkB;AAAA,IAAK,CAAC,EAAE,iBAAAG,iBAAgB,MACxCA,iBAAgB;AAAA,MACd;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AACF,OAAO;AACL,0DAAkB;AAAA,IAAK,CAAC,EAAE,cAAAC,cAAa,MACrCA,cAAa;AAAA,MACX;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": ["import_path", "prettyBytes", "brotliSizeModule", "build", "outfile", "fastGlob", "entryPoint", "buildForBrowser", "buildForNode"]
}
