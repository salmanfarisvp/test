#!/usr/bin/env node
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  baseConfig: () => baseConfig,
  buildForBrowser: () => buildForBrowser,
  buildForNode: () => buildForNode,
  debugBuildOptions: () => debugBuildOptions,
  defaultBundleConfigBrowser: () => defaultBundleConfigBrowser,
  defaultBundleConfigNode: () => defaultBundleConfigNode,
  esmDirnamePlugin: () => esmDirnamePlugin,
  formatSize: () => formatSize,
  genericBuild: () => genericBuild,
  genericDefaultBundleConifg: () => genericDefaultBundleConifg,
  getOutfileName: () => getOutfileName,
  getPadLeft: () => getPadLeft,
  getSizeInfo: () => getSizeInfo,
  makeAllPackagesExternalPlugin: () => makeAllPackagesExternalPlugin
});
import { build } from "esbuild";
import { extname, dirname, sep } from "path";
import { readFile } from "fs/promises";
import { basename, parse } from "path";
import { green, red, yellow, white } from "kleur/colors";
import { gzipSize } from "gzip-size";
import brotliSizeModule from "brotli-size";
import prettyBytes from "pretty-bytes";
import fastGlob from "fast-glob";
import { writeFileSync } from "fs";
import { generateDtsBundle } from "dts-bundle-generator";
import { debug, error, info, log, time, timeEnd, warn } from "@jsheaven/status-message";
var getPadLeft, formatSize, getSizeInfo, makeAllPackagesExternalPlugin, esmDirnamePlugin, baseConfig, printFileSizes, getOutfileName, debugBuildOptions, genericBuild, genericDefaultBundleConifg, defaultBundleConfigBrowser, defaultBundleConfigNode, buildForBrowser, buildForNode;
var init_src = __esm({
  "src/index.ts"() {
    getPadLeft = (str, width, char = " ") => char.repeat(width - str.length);
    formatSize = (size, filename, type, raw) => {
      const pretty = raw ? `${size} B` : prettyBytes(size);
      const color = size < 5e3 ? green : size > 4e4 ? red : yellow;
      const indent = getPadLeft(pretty, 13);
      return `${indent}${color(pretty)}: ${white(basename(filename))}${type ? `.${type}` : ""}`;
    };
    getSizeInfo = async (code, filename, raw) => {
      raw = raw || code.length < 5e3;
      const [gzip, brotli] = await Promise.all([
        gzipSize(code).catch(() => null),
        // @ts-ignore
        brotliSizeModule.default(code).catch(() => null)
      ]);
      let out = formatSize(gzip, filename, "gz", raw);
      if (brotli) {
        out += "\n" + formatSize(brotli, filename, "br", raw);
      }
      return out;
    };
    makeAllPackagesExternalPlugin = {
      name: "make-all-packages-external",
      setup(build2) {
        let filter = /^[^.\/]|^\.[^.\/]|^\.\.[^\/]/;
        build2.onResolve({ filter }, (args) => ({ path: args.path, external: true }));
      }
    };
    esmDirnamePlugin = {
      name: "esmDirname",
      setup(build2) {
        const nodeModules = new RegExp(/^(?:.*[\\\/])?node_modules(?:[\\\/].*)?$/);
        build2.onLoad({ filter: /.*/ }, async ({ path }) => {
          if (!path.match(nodeModules)) {
            let contents = await readFile(path, "utf8");
            const loader = extname(path).substring(1);
            const _dirname = dirname(path);
            contents = contents.replaceAll('"/Users/admin/Code/easybundle/src"', `"${_dirname}"`).replaceAll('"/Users/admin/Code/easybundle/src/index.ts"', `"${path}"`);
            return {
              contents,
              loader
            };
          }
        });
      }
    };
    baseConfig = {
      sourcemap: "linked",
      target: "esnext",
      bundle: true,
      minify: true,
      minifySyntax: true,
      minifyIdentifiers: true,
      minifyWhitespace: true,
      legalComments: "none"
    };
    printFileSizes = async (outfile2) => {
      const outfileParsed = parse(outfile2);
      log("OK", "Find your bundle in", outfileParsed.dir);
      const file = await fastGlob(`${outfileParsed.dir}${sep}${outfileParsed.name}*{js,map,d.ts}`);
      for (let i = 0; i < file.length; i++) {
        const filePath = file[i];
        const code = await readFile(filePath, { encoding: "utf8" });
        if (filePath.endsWith(".js")) {
          console.log(await getSizeInfo(code, filePath, false));
        }
        console.log(formatSize(Buffer.from(code).byteLength, filePath));
      }
    };
    getOutfileName = (fileName, subType) => {
      const fileNameParsed = parse(fileName);
      return `${fileNameParsed.dir}${sep}${fileNameParsed.name}.${subType}${fileNameParsed.ext}`;
    };
    debugBuildOptions = {
      minify: false,
      minifySyntax: false,
      minifyIdentifiers: false,
      minifyWhitespace: false
    };
    genericBuild = async ({
      outputFormats,
      entryPoint: entryPoint2,
      outfile: outfile2,
      esBuildOptions,
      debug: isDebug,
      dts,
      tsConfigPath,
      dtsLibOptions,
      dtsOutputOptions
    }) => {
      time("BUNDLED IN");
      if (isDebug) {
        esBuildOptions = {
          ...esBuildOptions,
          ...debugBuildOptions
        };
        debug(
          "CONFIG",
          "easybundle",
          {
            entryPoint: entryPoint2,
            outfile: outfile2,
            esBuildOptions,
            debug: isDebug,
            dts,
            tsConfigPath,
            dtsLibOptions,
            dtsOutputOptions
          },
          "esbuild plugins",
          esBuildOptions.plugins
        );
      }
      time("BUILT IN");
      info("BUILD", "Transpiling", entryPoint2, "...");
      await Promise.all(
        outputFormats.map(
          async (format) => build({
            format,
            entryPoints: [entryPoint2],
            outfile: getOutfileName(outfile2, format),
            ...esBuildOptions || {}
          })
        )
      );
      timeEnd("BUILT IN");
      if (dts) {
        time("DTS IN");
        info("DTS", "Generating .d.ts files...");
        try {
          const dTsBundles = generateDtsBundle(
            [
              {
                filePath: entryPoint2,
                libraries: dtsLibOptions,
                output: dtsOutputOptions
              }
            ],
            { preferredConfigPath: tsConfigPath }
          );
          for (let i = 0; i < outputFormats.length; i++) {
            const format = outputFormats[i];
            const outFileNameParsed = parse(getOutfileName(outfile2, format));
            const declarationOutFile = `${outFileNameParsed.dir}${sep}${outFileNameParsed.name}.d.ts`;
            writeFileSync(declarationOutFile, dTsBundles[0], { encoding: "utf-8" });
          }
        } catch (e) {
          if (/Symbol for root source file (.*) not found/.test(e.toString())) {
            warn("DTS", "No type exports found. Skipping.");
          } else {
            error("DTS", "Error while generating .d.ts files: ", e);
          }
        }
        timeEnd("DTS IN");
      }
      await printFileSizes(outfile2);
      timeEnd("BUNDLED IN");
    };
    genericDefaultBundleConifg = {
      outputFormats: ["iife", "esm", "cjs"],
      dts: true,
      tsConfigPath: "tsconfig.json",
      dtsOutputOptions: {
        exportReferencedTypes: true,
        inlineDeclareExternals: true,
        inlineDeclareGlobals: true,
        noBanner: true,
        sortNodes: true
      }
    };
    defaultBundleConfigBrowser = {
      ...genericDefaultBundleConifg,
      esBuildOptions: {
        ...baseConfig,
        platform: "browser",
        plugins: [esmDirnamePlugin]
      }
    };
    defaultBundleConfigNode = {
      ...genericDefaultBundleConifg,
      esBuildOptions: {
        ...baseConfig,
        platform: "node",
        plugins: [esmDirnamePlugin, makeAllPackagesExternalPlugin]
      }
    };
    buildForBrowser = async (config) => genericBuild({
      ...defaultBundleConfigBrowser,
      ...config,
      dtsOutputOptions: {
        ...defaultBundleConfigBrowser.dtsOutputOptions,
        ...config.dtsOutputOptions || {}
      },
      esBuildOptions: {
        ...defaultBundleConfigBrowser.esBuildOptions,
        ...config.esBuildOptions || {}
      }
    });
    buildForNode = async (config) => genericBuild({
      ...defaultBundleConfigNode,
      ...config,
      dtsOutputOptions: {
        ...defaultBundleConfigNode.dtsOutputOptions,
        ...config.dtsOutputOptions || {}
      },
      esBuildOptions: {
        ...defaultBundleConfigNode.esBuildOptions,
        ...config.esBuildOptions || {}
      }
    });
  }
});

// src/cli.ts
var entryPoint = process.argv[2] || "./src/index.ts";
var outfile = process.argv[3] || "./dist/index.js";
var platform = process.argv[4] || "node";
if (platform === "browser") {
  Promise.resolve().then(() => (init_src(), src_exports)).then(
    ({ buildForBrowser: buildForBrowser2 }) => buildForBrowser2({
      entryPoint,
      outfile
    })
  );
} else {
  Promise.resolve().then(() => (init_src(), src_exports)).then(
    ({ buildForNode: buildForNode2 }) => buildForNode2({
      entryPoint,
      outfile
    })
  );
}
//# sourceMappingURL=cli.esm.js.map
