// src/index.ts
import * as colors from "kleur/colors";
var formatTag = (tag) => colors.bold(colors.white(` ${tag} `));
var error = (tag, ...args) => console.error(colors.white(colors.bgRed(formatTag(tag))), ...args);
var info = (tag, ...args) => console.info(colors.black(colors.bgCyan(formatTag(tag))), ...args);
var warn = (tag, ...args) => console.warn(colors.bgBlack(colors.bgYellow(formatTag(tag))), ...args);
var log = (tag, ...args) => console.log(!tag ? "" : colors.black(colors.bgGreen(formatTag(tag))), ...args);
var debug = (tag, ...args) => console.debug(colors.white(colors.bgMagenta(formatTag(tag))), ...args);
var trace = (tag, ...args) => console.trace(colors.white(colors.bgBlack(formatTag(tag))), ...args);
var formatTimeLabel = (label) => colors.bgBlack(colors.white(` \u23F0 ${label} `));
var time = (label) => console.time(formatTimeLabel(label));
var timeEnd = (label) => console.timeEnd(formatTimeLabel(label));
var clearPrevLine = () => {
  process.stdout.moveCursor(0, -1);
  process.stdout.clearLine(1);
  process.stdout.cursorTo(0);
};
var spinner = (label) => {
  let i = 0;
  const spinner2 = ["\u280B", "\u2819", "\u2839", "\u2838", "\u283C", "\u2834", "\u2826", "\u2827", "\u2807", "\u280F"];
  const spinnerInterval = setInterval(() => {
    clearPrevLine();
    process.stdout.write(`${colors.bgCyan(` ${colors.white(colors.bold(spinner2[i]))} `)} ${colors.white(label)}
`);
    i = (i + 1) % spinner2.length;
  }, 100);
  return () => {
    clearInterval(spinnerInterval);
    clearPrevLine();
  };
};
export {
  clearPrevLine,
  debug,
  error,
  formatTag,
  formatTimeLabel,
  info,
  log,
  spinner,
  time,
  timeEnd,
  trace,
  warn
};
//# sourceMappingURL=index.esm.js.map
