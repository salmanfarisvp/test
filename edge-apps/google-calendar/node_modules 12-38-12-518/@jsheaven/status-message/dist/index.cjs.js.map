{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as colors from 'kleur/colors'\n\nexport const formatTag = (tag: string) => colors.bold(colors.white(` ${tag} `))\n\nexport const error = (tag?: string, ...args: Array<any>) =>\n  console.error(colors.white(colors.bgRed(formatTag(tag))), ...args)\nexport const info = (tag?: string, ...args: Array<any>) =>\n  console.info(colors.black(colors.bgCyan(formatTag(tag))), ...args)\nexport const warn = (tag?: string, ...args: Array<any>) =>\n  console.warn(colors.bgBlack(colors.bgYellow(formatTag(tag))), ...args)\nexport const log = (tag?: string, ...args: Array<any>) =>\n  console.log(!tag ? '' : colors.black(colors.bgGreen(formatTag(tag))), ...args)\nexport const debug = (tag?: string, ...args: Array<any>) =>\n  console.debug(colors.white(colors.bgMagenta(formatTag(tag))), ...args)\nexport const trace = (tag?: string, ...args: Array<any>) =>\n  console.trace(colors.white(colors.bgBlack(formatTag(tag))), ...args)\n\nexport const formatTimeLabel = (label: string) => colors.bgBlack(colors.white(` \u23F0 ${label} `))\n\n/** logs when timeEnd(...) will be called with the same arguments */\nexport const time = (label: string) => console.time(formatTimeLabel(label))\n\n/** prints the log with the duration since time(...) was called with the same arguments */\nexport const timeEnd = (label: string) => console.timeEnd(formatTimeLabel(label))\n\nexport const clearPrevLine = () => {\n  process.stdout.moveCursor(0, -1)\n  process.stdout.clearLine(1)\n  process.stdout.cursorTo(0)\n}\n\n/** shows a spinning loading animation and returns a function to stop that again  */\nexport const spinner = (label: string) => {\n  let i = 0\n  const spinner = ['\u280B', '\u2819', '\u2839', '\u2838', '\u283C', '\u2834', '\u2826', '\u2827', '\u2807', '\u280F']\n  const spinnerInterval = setInterval(() => {\n    clearPrevLine()\n    process.stdout.write(`${colors.bgCyan(` ${colors.white(colors.bold(spinner[i]))} `)} ${colors.white(label)}\\n`)\n    i = (i + 1) % spinner.length\n  }, 100)\n\n  return () => {\n    clearInterval(spinnerInterval)\n    clearPrevLine()\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AAEjB,IAAM,YAAY,CAAC,QAAuB,YAAY,aAAM,IAAI,MAAM,CAAC;AAEvE,IAAM,QAAQ,CAAC,QAAiB,SACrC,QAAQ,MAAa,aAAa,aAAM,UAAU,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI;AAC5D,IAAM,OAAO,CAAC,QAAiB,SACpC,QAAQ,KAAY,aAAa,cAAO,UAAU,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI;AAC5D,IAAM,OAAO,CAAC,QAAiB,SACpC,QAAQ,KAAY,eAAe,gBAAS,UAAU,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI;AAChE,IAAM,MAAM,CAAC,QAAiB,SACnC,QAAQ,IAAI,CAAC,MAAM,KAAY,aAAa,eAAQ,UAAU,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI;AACxE,IAAM,QAAQ,CAAC,QAAiB,SACrC,QAAQ,MAAa,aAAa,iBAAU,UAAU,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI;AAChE,IAAM,QAAQ,CAAC,QAAiB,SACrC,QAAQ,MAAa,aAAa,eAAQ,UAAU,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI;AAE9D,IAAM,kBAAkB,CAAC,UAAyB,eAAe,aAAM,WAAM,QAAQ,CAAC;AAGtF,IAAM,OAAO,CAAC,UAAkB,QAAQ,KAAK,gBAAgB,KAAK,CAAC;AAGnE,IAAM,UAAU,CAAC,UAAkB,QAAQ,QAAQ,gBAAgB,KAAK,CAAC;AAEzE,IAAM,gBAAgB,MAAM;AACjC,UAAQ,OAAO,WAAW,GAAG,EAAE;AAC/B,UAAQ,OAAO,UAAU,CAAC;AAC1B,UAAQ,OAAO,SAAS,CAAC;AAC3B;AAGO,IAAM,UAAU,CAAC,UAAkB;AACxC,MAAI,IAAI;AACR,QAAMA,WAAU,CAAC,UAAK,UAAK,UAAK,UAAK,UAAK,UAAK,UAAK,UAAK,UAAK,QAAG;AACjE,QAAM,kBAAkB,YAAY,MAAM;AACxC,kBAAc;AACd,YAAQ,OAAO,MAAM,GAAU,cAAO,IAAW,aAAa,YAAKA,SAAQ,CAAC,CAAC,CAAC,IAAI,KAAY,aAAM,KAAK;AAAA,CAAK;AAC9G,SAAK,IAAI,KAAKA,SAAQ;AAAA,EACxB,GAAG,GAAG;AAEN,SAAO,MAAM;AACX,kBAAc,eAAe;AAC7B,kBAAc;AAAA,EAChB;AACF;",
  "names": ["spinner"]
}
