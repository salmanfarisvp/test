(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // src/index.ts
  var colors = __toESM(__require("kleur/colors"), 1);
  var formatTag = (tag) => colors.bold(colors.white(` ${tag} `));
  var error = (tag, ...args) => console.error(colors.white(colors.bgRed(formatTag(tag))), ...args);
  var info = (tag, ...args) => console.info(colors.black(colors.bgCyan(formatTag(tag))), ...args);
  var warn = (tag, ...args) => console.warn(colors.bgBlack(colors.bgYellow(formatTag(tag))), ...args);
  var log = (tag, ...args) => console.log(!tag ? "" : colors.black(colors.bgGreen(formatTag(tag))), ...args);
  var debug = (tag, ...args) => console.debug(colors.white(colors.bgMagenta(formatTag(tag))), ...args);
  var trace = (tag, ...args) => console.trace(colors.white(colors.bgBlack(formatTag(tag))), ...args);
  var formatTimeLabel = (label) => colors.bgBlack(colors.white(` \u23F0 ${label} `));
  var time = (label) => console.time(formatTimeLabel(label));
  var timeEnd = (label) => console.timeEnd(formatTimeLabel(label));
  var clearPrevLine = () => {
    process.stdout.moveCursor(0, -1);
    process.stdout.clearLine(1);
    process.stdout.cursorTo(0);
  };
  var spinner = (label) => {
    let i = 0;
    const spinner2 = ["\u280B", "\u2819", "\u2839", "\u2838", "\u283C", "\u2834", "\u2826", "\u2827", "\u2807", "\u280F"];
    const spinnerInterval = setInterval(() => {
      clearPrevLine();
      process.stdout.write(`${colors.bgCyan(` ${colors.white(colors.bold(spinner2[i]))} `)} ${colors.white(label)}
`);
      i = (i + 1) % spinner2.length;
    }, 100);
    return () => {
      clearInterval(spinnerInterval);
      clearPrevLine();
    };
  };
})();
//# sourceMappingURL=index.iife.js.map
