{
  "version": 3,
  "sources": ["../src/codegen.ts"],
  "sourcesContent": ["import { readFileSync, writeFileSync } from \"fs\"\nimport { resolve } from \"path\"\nimport { parse } from 'csv-parse'\nimport lzTs from 'lz-ts';\nconst { compressToURI } = lzTs;\n\nimport { CountryIso2, BaseData, BaseDataRow } from \"./interfaces\"\n\nimport s2geo from 's2-geometry';\nconst { S2 } = s2geo;\n\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n\nconst csvParser = parse({\n  delimiter: ',',\n  quote: '\"'\n})\n\ninterface CountryLookupMapIso2 {\n    [code: string]: CountryIso2\n}\n\nexport const transformCountryListIso2ToCodeLookupMap = (countriesList: Array<Array<string>>): CountryLookupMapIso2 => {\n    const countryMapIso2: CountryLookupMapIso2 = {}\n    countriesList.forEach((country: Array<string>, index: number) => {\n        countryMapIso2[country[0]] = {\n            code: country[0],\n            name: country[1],\n            index\n        }\n    })\n    return countryMapIso2\n}\n\nexport const getRawCityCountryList = async(countryMapIso2: CountryLookupMapIso2, citiesAndCountries: string, minPopulation: number = 15000): Promise<BaseData> => {\n    return new Promise((resolve) => {\n        const data: BaseData = []\n        csvParser.on('readable', function(){\n            let record;\n            while ((record = csvParser.read()) !== null) {\n                const [cityNameAscii,,lat,lng,,iso2,,,capital,population,] = record\n                // all major cities of the world, population >= minPopulation \n                // and all capital cities, even if < minPopulation\n                const latFloat = parseFloat(lat)\n                const lngFloat = parseFloat(lng)\n\n                if ((parseInt(population) >= minPopulation || capital) && latFloat && lngFloat) {\n                    data.push([\n                        S2.latLngToKey(latFloat, lngFloat, 8),\n                        cityNameAscii,\n                        countryMapIso2[iso2].index,\n                    ]);\n                }\n            }\n        });\n\n        csvParser.on('end', async() => {\n\n            // pre-sort by country primary key\n            data.sort((a: BaseDataRow, b: BaseDataRow) => {\n                return (a[2] as number) - (b[2] as number)\n            })\n            resolve(data)\n        });\n        csvParser.write(citiesAndCountries)\n        csvParser.end()\n    })\n}\n\nexport const encodeData = (rows: BaseData) => {\n    let data = ''\n    let currentCountryCode: number|null = null\n    rows.forEach((row, index) => {\n        const nextRow = rows[index+1]\n        data += `${row[0]}${row[1]}\\n`\n        if (nextRow && nextRow[2]) {\n            if (currentCountryCode === null || (nextRow && nextRow[2] !== currentCountryCode)) {\n                data += `${nextRow[2]}\\n`\n                currentCountryCode = nextRow[2] as number\n            }\n        }\n    })\n    return data\n}\n\nexport const compressBaseData = (rows: BaseData): string => compressToURI(encodeData(rows))\n\n;(async() => {\n\n    // countries\n    const countriesList = JSON.parse(\n        readFileSync(resolve(__dirname, '../data/countriesIso2.json'), { encoding: 'utf8' })\n    ).map((countryIso2: CountryIso2) => ([countryIso2.code, countryIso2.name]))\n\n    writeFileSync(resolve(__dirname, '../src/gen/baseDataCountries.ts'), `\n    export const BASE_DATA_COUNTRIES = \\`${compressBaseData(countriesList)}\\`;\n    `)\n\n    // cities\n    const baseDataCities = await getRawCityCountryList(\n        transformCountryListIso2ToCodeLookupMap(countriesList),\n        readFileSync(resolve(__dirname, '../data/worldcities.csv'), { encoding: 'utf8' })\n    )\n    writeFileSync(resolve(__dirname, '../src/gen/baseDataCities.ts'), `\n    export const BASE_DATA_CITIES = \\`${compressBaseData(baseDataCities)}\\`;\n    `)\n})()\n\n"],
  "mappings": "AAAA,OAAS,gBAAAA,EAAc,iBAAAC,MAAqB,KAC5C,OAAS,WAAAC,MAAe,OACxB,OAAS,SAAAC,MAAa,YACtB,OAAOC,MAAU,QAKjB,OAAOC,MAAW,cAGlB,OAAS,iBAAAC,MAAqB,MAC9B,OAAS,WAAAC,MAAe,OARxB,GAAM,CAAE,cAAAC,CAAc,EAAIJ,EAKpB,CAAE,GAAAK,CAAG,EAAIJ,EAKTK,EAAaJ,EAAc,YAAY,GAAG,EAC1CK,EAAYJ,EAAQG,CAAU,EAG9BE,EAAYT,EAAM,CACtB,UAAW,IACX,MAAO,GACT,CAAC,EAMYU,EAA2CC,GAA8D,CAClH,IAAMC,EAAuC,CAAC,EAC9C,OAAAD,EAAc,QAAQ,CAACE,EAAwBC,IAAkB,CAC7DF,EAAeC,EAAQ,CAAC,CAAC,EAAI,CACzB,KAAMA,EAAQ,CAAC,EACf,KAAMA,EAAQ,CAAC,EACf,MAAAC,CACJ,CACJ,CAAC,EACMF,CACX,EAEaG,EAAwB,MAAMH,EAAsCI,EAA4BC,EAAwB,OAC1H,IAAI,QAASlB,GAAY,CAC5B,IAAMmB,EAAiB,CAAC,EACxBT,EAAU,GAAG,WAAY,UAAU,CAC/B,IAAIU,EACJ,MAAQA,EAASV,EAAU,KAAK,KAAO,MAAM,CACzC,GAAM,CAACW,EAAc,CAACC,EAAIC,EAAI,CAACC,EAAK,CAAC,CAACC,EAAQC,CAAW,EAAIN,EAGvDO,EAAW,WAAWL,CAAG,EACzBM,EAAW,WAAWL,CAAG,GAE1B,SAASG,CAAU,GAAKR,GAAiBO,IAAYE,GAAYC,GAClET,EAAK,KAAK,CACNZ,EAAG,YAAYoB,EAAUC,EAAU,CAAC,EACpCP,EACAR,EAAeW,CAAI,EAAE,KACzB,CAAC,EAGb,CAAC,EAEDd,EAAU,GAAG,MAAO,SAAW,CAG3BS,EAAK,KAAK,CAAC,EAAgBU,IACf,EAAE,CAAC,EAAgBA,EAAE,CAAC,CACjC,EACD7B,EAAQmB,CAAI,CAChB,CAAC,EACDT,EAAU,MAAMO,CAAkB,EAClCP,EAAU,IAAI,CAClB,CAAC,EAGQoB,EAAcC,GAAmB,CAC1C,IAAIZ,EAAO,GACPa,EAAkC,KACtC,OAAAD,EAAK,QAAQ,CAACE,EAAKlB,IAAU,CACzB,IAAMmB,EAAUH,EAAKhB,EAAM,CAAC,EAC5BI,GAAQ,GAAGc,EAAI,CAAC,IAAIA,EAAI,CAAC;AAAA,EACrBC,GAAWA,EAAQ,CAAC,IAChBF,IAAuB,MAASE,GAAWA,EAAQ,CAAC,IAAMF,KAC1Db,GAAQ,GAAGe,EAAQ,CAAC;AAAA,EACpBF,EAAqBE,EAAQ,CAAC,EAG1C,CAAC,EACMf,CACX,EAEagB,EAAoBJ,GAA2BzB,EAAcwB,EAAWC,CAAI,CAAC,GAExF,SAAW,CAGT,IAAMnB,EAAgB,KAAK,MACvBd,EAAaE,EAAQS,EAAW,4BAA4B,EAAG,CAAE,SAAU,MAAO,CAAC,CACvF,EAAE,IAAK2B,GAA8B,CAACA,EAAY,KAAMA,EAAY,IAAI,CAAE,EAE1ErC,EAAcC,EAAQS,EAAW,iCAAiC,EAAG;AAAA,2CAC9B0B,EAAiBvB,CAAa;AAAA,KACpE,EAGD,IAAMyB,EAAiB,MAAMrB,EACzBL,EAAwCC,CAAa,EACrDd,EAAaE,EAAQS,EAAW,yBAAyB,EAAG,CAAE,SAAU,MAAO,CAAC,CACpF,EACAV,EAAcC,EAAQS,EAAW,8BAA8B,EAAG;AAAA,wCAC9B0B,EAAiBE,CAAc;AAAA,KAClE,CACL,GAAG",
  "names": ["readFileSync", "writeFileSync", "resolve", "parse", "lzTs", "s2geo", "fileURLToPath", "dirname", "compressToURI", "S2", "__filename", "__dirname", "csvParser", "transformCountryListIso2ToCodeLookupMap", "countriesList", "countryMapIso2", "country", "index", "getRawCityCountryList", "citiesAndCountries", "minPopulation", "data", "record", "cityNameAscii", "lat", "lng", "iso2", "capital", "population", "latFloat", "lngFloat", "b", "encodeData", "rows", "currentCountryCode", "row", "nextRow", "compressBaseData", "countryIso2", "baseDataCities"]
}
