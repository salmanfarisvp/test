import{readFileSync as l,writeFileSync as d}from"fs";import{resolve as i}from"path";import{parse as B}from"csv-parse";import b from"lz-ts";import L from"s2-geometry";import{fileURLToPath as T}from"url";import{dirname as x}from"path";var{compressToURI:A}=b,{S2:w}=L,R=T(import.meta.url),c=x(R),s=B({delimiter:",",quote:'"'}),S=t=>{let e={};return t.forEach((o,r)=>{e[o[0]]={code:o[0],name:o[1],index:r}}),e},_=async(t,e,o=15e3)=>new Promise(r=>{let n=[];s.on("readable",function(){let a;for(;(a=s.read())!==null;){let[p,,y,C,,D,,,g,I]=a,u=parseFloat(y),m=parseFloat(C);(parseInt(I)>=o||g)&&u&&m&&n.push([w.latLngToKey(u,m,8),p,t[D].index])}}),s.on("end",async()=>{n.sort((a,p)=>a[2]-p[2]),r(n)}),s.write(e),s.end()}),E=t=>{let e="",o=null;return t.forEach((r,n)=>{let a=t[n+1];e+=`${r[0]}${r[1]}
`,a&&a[2]&&(o===null||a&&a[2]!==o)&&(e+=`${a[2]}
`,o=a[2])}),e},f=t=>A(E(t));(async()=>{let t=JSON.parse(l(i(c,"../data/countriesIso2.json"),{encoding:"utf8"})).map(o=>[o.code,o.name]);d(i(c,"../src/gen/baseDataCountries.ts"),`
    export const BASE_DATA_COUNTRIES = \`${f(t)}\`;
    `);let e=await _(S(t),l(i(c,"../data/worldcities.csv"),{encoding:"utf8"}));d(i(c,"../src/gen/baseDataCities.ts"),`
    export const BASE_DATA_CITIES = \`${f(e)}\`;
    `)})();export{f as compressBaseData,E as encodeData,_ as getRawCityCountryList,S as transformCountryListIso2ToCodeLookupMap};
//# sourceMappingURL=codegen.esm.js.map
